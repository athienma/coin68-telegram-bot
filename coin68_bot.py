import requests
import xml.etree.ElementTree as ET
import re
import json
import os
import sys
from datetime import datetime

# L·∫•y token t·ª´ environment variables
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')

# C·∫•u h√¨nh
MAX_NEWS_PER_RUN = 10
DELAY_BETWEEN_MESSAGES = 2  # Gi√¢y gi·ªØa c√°c tin

def debug_env():
    """Debug environment variables"""
    print("üîç DEBUG ENVIRONMENT VARIABLES:")
    print(f"BOT_TOKEN: {'SET' if BOT_TOKEN else 'MISSING'}")
    print(f"CHAT_ID: {'SET' if CHAT_ID else 'MISSING'}")
    print(f"Python Version: {sys.version}")
    print(f"Max news per run: {MAX_NEWS_PER_RUN}")
    print("-" * 50)

def get_rss_data():
    try:
        print("üîÑ ƒêang k·∫øt n·ªëi ƒë·∫øn Coin68 RSS...")
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Accept': 'application/xml, text/xml, */*'
        }
        
        response = requests.get(
            'https://coin68.com/rss/tin-moi-nhat.rss', 
            headers=headers, 
            timeout=15
        )
        
        print(f"‚úÖ Status Code: {response.status_code}")
        
        if response.status_code != 200:
            print(f"‚ùå L·ªói HTTP: {response.status_code}")
            return None
            
        # Parse XML
        try:
            root = ET.fromstring(response.content)
            print("‚úÖ Parse XML th√†nh c√¥ng")
        except ET.ParseError as e:
            print(f"‚ùå L·ªói parse XML: {e}")
            return None
            
        news_items = []
        for item in root.findall('.//item'):
            try:
                title_elem = item.find('title')
                desc_elem = item.find('description') 
                link_elem = item.find('link')
                pub_date_elem = item.find('pubDate')
                
                title = title_elem.text if title_elem is not None else "Kh√¥ng c√≥ ti√™u ƒë·ªÅ"
                description = desc_elem.text if desc_elem is not None else "Kh√¥ng c√≥ m√¥ t·∫£"
                link = link_elem.text if link_elem is not None else "#"
                pub_date = pub_date_elem.text if pub_date_elem is not None else ""
                
                # L√†m s·∫°ch m√¥ t·∫£
                clean_description = re.sub('<[^<]+?>', '', description)
                clean_description = clean_description.strip()
                
                # Chuy·ªÉn ƒë·ªïi pub_date th√†nh datetime object ƒë·ªÉ s·∫Øp x·∫øp
                try:
                    pub_date_obj = datetime.strptime(pub_date, '%a, %d %b %Y %H:%M:%S %Z')
                except:
                    pub_date_obj = datetime.now()
                
                news_items.append({
                    'title': title, 
                    'description': clean_description,
                    'link': link, 
                    'pub_date_obj': pub_date_obj
                })
                
            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói x·ª≠ l√Ω item: {e}")
                continue
        
        # S·∫Øp x·∫øp tin theo th·ªùi gian (m·ªõi nh·∫•t tr∆∞·ªõc)
        news_items.sort(key=lambda x: x['pub_date_obj'], reverse=True)
        
        print(f"‚úÖ ƒê√£ l·∫•y ƒë∆∞·ª£c {len(news_items)} tin")
        return news_items
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
        return None
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        import traceback
        traceback.print_exc()
        return None

def send_telegram_message(message):
    try:
        if not BOT_TOKEN or not CHAT_ID:
            return False
            
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        data = {
            "chat_id": CHAT_ID,
            "text": message,
            "parse_mode": "HTML",
            "disable_web_page_preview": True  # T·∫Øt preview ƒë·ªÉ t·ª± control format
        }
        
        response = requests.post(url, data=data, timeout=10)
        result = response.json()
        
        return result.get('ok', False)
            
    except Exception as e:
        print(f"‚ùå L·ªói g·ª≠i tin nh·∫Øn: {e}")
        return False

def load_sent_links():
    """T·∫£i danh s√°ch c√°c link ƒë√£ g·ª≠i"""
    try:
        with open('sent_links.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return []

def save_sent_links(links):
    """L∆∞u danh s√°ch c√°c link ƒë√£ g·ª≠i"""
    try:
        # Gi·ªØ ch·ªâ 500 link g·∫ßn nh·∫•t
        if len(links) > 500:
            links = links[-500:]
        
        with open('sent_links.json', 'w', encoding='utf-8') as f:
            json.dump(links, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ùå L·ªói l∆∞u sent_links: {e}")

def format_news_message(item):
    """ƒê·ªãnh d·∫°ng tin nh·∫Øn v·ªõi link ·ªü d∆∞·ªõi c√πng"""
    title = item['title']
    description = item['description']
    
    # Lo·∫°i b·ªè tr√πng l·∫∑p: N·∫øu description b·∫Øt ƒë·∫ßu b·∫±ng title th√¨ b·ªè title trong description
    if description.startswith(title):
        description = description[len(title):].strip()
    
    # Gi·ªõi h·∫°n ƒë·ªô d√†i description
    if len(description) > 200:
        description = description[:200] + "..."
    
    # Format tin nh·∫Øn: ti√™u ƒë·ªÅ + m√¥ t·∫£ + link ·ªü d∆∞·ªõi c√πng
    message = f"{title}\n\n{description}\n\n‚û°Ô∏è ƒê·ªçc ti·∫øp: {item['link']}"
    
    return message

def main():
    print("=" * 60)
    print("ü§ñ B·∫Øt ƒë·∫ßu Coin68 Telegram Bot - LINK AT BOTTOM VERSION")
    print("=" * 60)
    
    debug_env()
    
    if not BOT_TOKEN or not CHAT_ID:
        print("‚ùå ERROR: Thi·∫øu BOT_TOKEN ho·∫∑c CHAT_ID")
        sys.exit(1)
    
    # T·∫£i danh s√°ch ƒë√£ g·ª≠i
    sent_links = load_sent_links()
    print(f"üìã S·ªë tin ƒë√£ g·ª≠i tr∆∞·ªõc ƒë√¢y: {len(sent_links)}")
    
    # L·∫•y d·ªØ li·ªáu RSS
    news_items = get_rss_data()
    if not news_items:
        print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu RSS")
        sys.exit(1)
    
    # L·ªçc tin ch∆∞a g·ª≠i
    new_items = [item for item in news_items if item['link'] not in sent_links]
    print(f"üì® S·ªë tin m·ªõi: {len(new_items)}")
    
    if not new_items:
        print("‚úÖ Kh√¥ng c√≥ tin m·ªõi")
        sys.exit(0)
    
    # Gi·ªõi h·∫°n s·ªë tin g·ª≠i m·ªói l·∫ßn
    items_to_send = new_items[:MAX_NEWS_PER_RUN]
    print(f"üì§ S·∫Ω g·ª≠i {len(items_to_send)} tin")
    
    # G·ª≠i tin
    success_count = 0
    for i, item in enumerate(items_to_send):
        try:
            print(f"\nüì® ƒêang g·ª≠i tin {i+1}/{len(items_to_send)}...")
            
            # Format tin nh·∫Øn v·ªõi link ·ªü d∆∞·ªõi c√πng
            message = format_news_message(item)
            
            # G·ª≠i tin nh·∫Øn
            if send_telegram_message(message):
                sent_links.append(item['link'])
                success_count += 1
                print(f"‚úÖ Tin {i+1} g·ª≠i th√†nh c√¥ng")
            else:
                print(f"‚ùå Tin {i+1} g·ª≠i th·∫•t b·∫°i")
            
            # Ch·ªù gi·ªØa c√°c tin
            if i < len(items_to_send) - 1:
                import time
                time.sleep(DELAY_BETWEEN_MESSAGES)
                
        except Exception as e:
            print(f"‚ùå L·ªói khi g·ª≠i tin {i+1}: {e}")
    
    # L∆∞u danh s√°ch ƒë√£ g·ª≠i
    save_sent_links(sent_links)
    
    print("\n" + "=" * 60)
    print(f"üéâ HO√ÄN TH√ÄNH! ƒê√£ g·ª≠i {success_count}/{len(items_to_send)} tin m·ªõi")
    print(f"üíæ T·ªïng s·ªë tin ƒë√£ g·ª≠i: {len(sent_links)}")
    print("=" * 60)
    
    if success_count == 0:
        sys.exit(1)

if __name__ == "__main__":
    main()
